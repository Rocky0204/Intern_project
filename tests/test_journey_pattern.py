from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from api.models import *
from api.database import *

# Import the client_with_db and db_session fixtures from conftest.py

# The client fixture is now provided by client_with_db in conftest.py
# client = TestClient(app) # This line is no longer needed

# The setup_db fixture is handled by conftest.py with scope="function"
# @pytest.fixture(scope="function", autouse=True)
# def setup_db():
#     Base.metadata.create_all(bind=engine)
#     yield
#     Base.metadata.drop_all(bind=engine)


def test_create_journey_pattern(client_with_db: TestClient, db_session: Session):
    """
    Tests the creation of a new journey pattern via the API.
    Verifies the API response and then checks the database directly using the same session.
    """
    test_data = {
        "jp_code": "JP001_CREATE",
        "line_id": 1,
        "route_id": 1,
        "service_id": 1,
        "operator_id": 1,
        "name": "Morning Commute",
    }

    # Use the client_with_db fixture for making requests
    response = client_with_db.post("/journey_patterns/", json=test_data)
    assert response.status_code == 200
    data = response.json()

    # Assertions on the API response
    assert data["jp_code"] == test_data["jp_code"]
    assert "jp_id" in data
    assert data["name"] == test_data["name"]

    # Verify creation by querying the database directly using the db_session fixture
    # This ensures we are querying the exact same database session used by the FastAPI app
    db_jp = (
        db_session.query(JourneyPattern)
        .filter(JourneyPattern.jp_code == test_data["jp_code"])
        .first()
    )
    assert db_jp is not None
    assert db_jp.jp_code == test_data["jp_code"]
    assert db_jp.name == test_data["name"]


def test_read_journey_patterns(client_with_db: TestClient, db_session: Session):
    """
    Tests retrieving a list of journey patterns.
    Ensures that previously created data is present in the list.
    """
    # Create test data directly in the database using the db_session fixture
    db_jp = JourneyPattern(
        **{
            "jp_code": "JP002_LIST",
            "line_id": 2,
            "route_id": 2,
            "service_id": 2,
            "operator_id": 2,
            "name": "Evening Commute List",
        }
    )
    db_session.add(db_jp)
    db_session.commit()  # Commit changes to the session
    db_session.refresh(db_jp)  # Refresh to get any auto-generated IDs if needed

    response = client_with_db.get("/journey_patterns/")
    assert response.status_code == 200
    data = response.json()

    # Assertions on the list of journey patterns
    assert isinstance(data, list)
    assert len(data) > 0
    # Check if the specific journey pattern created for this test is in the list
    assert any(jp["jp_code"] == "JP002_LIST" for jp in data)


def test_read_single_journey_pattern(client_with_db: TestClient, db_session: Session):
    """
    Tests retrieving a single journey pattern by its ID.
    """
    # Create test data directly in the database using the db_session fixture
    db_jp = JourneyPattern(
        **{
            "jp_code": "JP003_SINGLE",
            "line_id": 3,
            "route_id": 3,
            "service_id": 3,
            "operator_id": 3,
            "name": "Midday Single",
        }
    )
    db_session.add(db_jp)
    db_session.commit()
    db_session.refresh(db_jp)
    jp_id = db_jp.jp_id  # Get the ID generated by the database

    response = client_with_db.get(f"/journey_patterns/{jp_id}")
    assert response.status_code == 200
    data = response.json()

    # Assertions on the retrieved single journey pattern
    assert data["jp_id"] == jp_id
    assert data["jp_code"] == "JP003_SINGLE"
    assert data["name"] == "Midday Single"


def test_update_journey_pattern(client_with_db: TestClient, db_session: Session):
    """
    Tests updating an existing journey pattern.
    Verifies the API response and then checks the database directly using the same session.
    """
    # Create test data directly in the database using the db_session fixture
    db_jp = JourneyPattern(
        **{
            "jp_code": "JP004_UPDATE",
            "line_id": 4,
            "route_id": 4,
            "service_id": 4,
            "operator_id": 4,
            "name": "Original Name",
        }
    )
    db_session.add(db_jp)
    db_session.commit()
    db_session.refresh(db_jp)
    jp_id = db_jp.jp_id

    update_data = {"name": "Updated Pattern Name"}
    response = client_with_db.put(f"/journey_patterns/{jp_id}", json=update_data)
    assert response.status_code == 200
    data = response.json()

    # Assertions on the API response
    assert data["jp_id"] == jp_id
    assert data["name"] == update_data["name"]

    # Verify update by querying the database directly using the db_session fixture
    updated_db_jp = (
        db_session.query(JourneyPattern).filter(JourneyPattern.jp_id == jp_id).first()
    )
    assert updated_db_jp is not None
    assert updated_db_jp.name == update_data["name"]


def test_delete_journey_pattern(client_with_db: TestClient, db_session: Session):
    """
    Tests deleting a journey pattern.
    Verifies successful deletion and then attempts to retrieve the deleted item.
    """
    # Create test data directly in the database using the db_session fixture
    db_jp = JourneyPattern(
        **{
            "jp_code": "JP005_DELETE",
            "line_id": 5,
            "route_id": 5,
            "service_id": 5,
            "operator_id": 5,
            "name": "To Be Deleted",
        }
    )
    db_session.add(db_jp)
    db_session.commit()
    db_session.refresh(db_jp)
    jp_id = db_jp.jp_id

    response = client_with_db.delete(f"/journey_patterns/{jp_id}")
    assert response.status_code == 200
    assert response.json()["message"] == "Journey pattern deleted successfully"

    # Verify deletion by attempting to retrieve the item using the db_session fixture
    deleted_db_jp = (
        db_session.query(JourneyPattern).filter(JourneyPattern.jp_id == jp_id).first()
    )
    assert deleted_db_jp is None  # Should be None after deletion

    # Verify deletion by attempting to retrieve the item via API
    response = client_with_db.get(f"/journey_patterns/{jp_id}")
    assert response.status_code == 404
